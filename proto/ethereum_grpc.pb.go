// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.0--rc1
// source: proto/ethereum.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EthereumServiceClient is the client API for EthereumService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EthereumServiceClient interface {
	GetAccount(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountResponse, error)
	GetAccounts(ctx context.Context, opts ...grpc.CallOption) (EthereumService_GetAccountsClient, error)
}

type ethereumServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEthereumServiceClient(cc grpc.ClientConnInterface) EthereumServiceClient {
	return &ethereumServiceClient{cc}
}

func (c *ethereumServiceClient) GetAccount(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountResponse, error) {
	out := new(AccountResponse)
	err := c.cc.Invoke(ctx, "/proto.EthereumService/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethereumServiceClient) GetAccounts(ctx context.Context, opts ...grpc.CallOption) (EthereumService_GetAccountsClient, error) {
	stream, err := c.cc.NewStream(ctx, &EthereumService_ServiceDesc.Streams[0], "/proto.EthereumService/GetAccounts", opts...)
	if err != nil {
		return nil, err
	}
	x := &ethereumServiceGetAccountsClient{stream}
	return x, nil
}

type EthereumService_GetAccountsClient interface {
	Send(*AccountsRequest) error
	Recv() (*AccountsResponse, error)
	grpc.ClientStream
}

type ethereumServiceGetAccountsClient struct {
	grpc.ClientStream
}

func (x *ethereumServiceGetAccountsClient) Send(m *AccountsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ethereumServiceGetAccountsClient) Recv() (*AccountsResponse, error) {
	m := new(AccountsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EthereumServiceServer is the server API for EthereumService service.
// All implementations must embed UnimplementedEthereumServiceServer
// for forward compatibility
type EthereumServiceServer interface {
	GetAccount(context.Context, *AccountRequest) (*AccountResponse, error)
	GetAccounts(EthereumService_GetAccountsServer) error
	mustEmbedUnimplementedEthereumServiceServer()
}

// UnimplementedEthereumServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEthereumServiceServer struct {
}

func (UnimplementedEthereumServiceServer) GetAccount(context.Context, *AccountRequest) (*AccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedEthereumServiceServer) GetAccounts(EthereumService_GetAccountsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAccounts not implemented")
}
func (UnimplementedEthereumServiceServer) mustEmbedUnimplementedEthereumServiceServer() {}

// UnsafeEthereumServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EthereumServiceServer will
// result in compilation errors.
type UnsafeEthereumServiceServer interface {
	mustEmbedUnimplementedEthereumServiceServer()
}

func RegisterEthereumServiceServer(s grpc.ServiceRegistrar, srv EthereumServiceServer) {
	s.RegisterService(&EthereumService_ServiceDesc, srv)
}

func _EthereumService_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthereumServiceServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EthereumService/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthereumServiceServer).GetAccount(ctx, req.(*AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthereumService_GetAccounts_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EthereumServiceServer).GetAccounts(&ethereumServiceGetAccountsServer{stream})
}

type EthereumService_GetAccountsServer interface {
	Send(*AccountsResponse) error
	Recv() (*AccountsRequest, error)
	grpc.ServerStream
}

type ethereumServiceGetAccountsServer struct {
	grpc.ServerStream
}

func (x *ethereumServiceGetAccountsServer) Send(m *AccountsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ethereumServiceGetAccountsServer) Recv() (*AccountsRequest, error) {
	m := new(AccountsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EthereumService_ServiceDesc is the grpc.ServiceDesc for EthereumService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EthereumService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.EthereumService",
	HandlerType: (*EthereumServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccount",
			Handler:    _EthereumService_GetAccount_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAccounts",
			Handler:       _EthereumService_GetAccounts_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/ethereum.proto",
}
